group 'demo'
version '1.0'

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}


buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }

}

apply plugin: 'spring-boot'
apply plugin: 'java'
//apply plugin: 'war'

springBoot {
    mainClass = "demo.mybatis.SampleXmlApplication"
}

jar {
    baseName = 'springdemo'
    version = "${version}"
    manifest {
        attributes 'Main-Class': 'demo.mybatis.SampleXmlApplication'
    }
}


repositories {
    jcenter()
}


dependencies {
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-freemarker")
    // compile('org.springframework.boot:spring-boot-starter-cache')
    //mybatis
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1")
    compile("mysql:mysql-connector-java")
    compile("com.github.pagehelper:pagehelper:4.1.6")
    //mybatis

    //compile("com.fasterxml.jackson.jaxrs:jackson-jaxrs-xml-provider:2.5.0")

    //ActiveMQ
    compile("org.springframework.boot:spring-boot-starter-activemq")
    //websocket
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    //
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task clearPj(type: Delete) {
    delete "${projectDir}/build", "${projectDir}/target", "${projectDir}/lib"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task copyJars(type: Sync) {
    from configurations.runtime
    into "${projectDir}/lib"
}

task copyMapperXml(type: Copy) {
    from "${projectDir}/src/main/java/"
    into "${buildDir}/classes/main/"
    include '**/*Mapper.xml'
}

task copyResources(type: Copy) {
    from "${projectDir}/src/main/resources/"
    into "${buildDir}/classes/"
}

//
compileJava.dependsOn clearPj
processResources.dependsOn copyJars, copyResources, copyMapperXml